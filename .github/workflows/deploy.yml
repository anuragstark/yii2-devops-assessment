name: Deploy Yii2 Application

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/yii2-app
  REGISTRY: docker.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate build summary
      run: |
        echo "## Build Summary 🚀" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ env.DOCKER_IMAGE }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Digest**: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: \`linux/amd64\`" >> $GITHUB_STEP_SUMMARY

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    - name: Add EC2 to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Setup Ansible
      run: |
        pip install ansible docker

    - name: Create Ansible inventory
      run: |
        mkdir -p ansible/inventory
        cat > ansible/inventory/hosts.yml << EOF
        [ec2_servers]
        production ansible_host=${{ secrets.EC2_HOST }} ansible_user=ubuntu
        
        [ec2_servers:vars]
        ansible_ssh_common_args='-o StrictHostKeyChecking=no'
        ansible_python_interpreter=/usr/bin/python3
        docker_hub_username=${{ secrets.DOCKER_HUB_USERNAME }}
        docker_hub_password=${{ secrets.DOCKER_HUB_TOKEN }}
        docker_image_name=${{ env.DOCKER_IMAGE }}:latest
        github_repo_url=${{ github.server_url }}/${{ github.repository }}
        EOF

    - name: Test SSH connection
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"

    - name: Deploy application with Ansible
      run: |
        cd ansible
        ansible-playbook -i inventory/hosts.yml playbooks/deploy-app.yml -v
      env:
        ANSIBLE_HOST_KEY_CHECKING: False

    - name: Verify deployment
      run: |
        # Wait a bit for the service to start
        sleep 30
        
        # Check if the application is accessible
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }})
        
        if [ $response -eq 200 ]; then
          echo "✅ Deployment successful! Application is accessible."
          echo "🌐 Application URL: http://${{ secrets.EC2_HOST }}"
        else
          echo "❌ Deployment verification failed. HTTP status: $response"
          exit 1
        fi

    - name: Rollback on failure
      if: failure()
      run: |
        echo "🔄 Attempting rollback..."
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          cd /home/ubuntu/yii2-app
          docker service update --rollback yii2-app_yii2-app || echo "Rollback failed"
        EOF

    - name: Generate deployment summary
      if: always()
      run: |
        echo "## Deployment Summary 📋" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: \`${{ secrets.EC2_HOST }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ needs.build-and-push.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: \`${{ job.status }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "- **URL**: http://${{ secrets.EC2_HOST }}" >> $GITHUB_STEP_SUMMARY
        fi

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always()
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
