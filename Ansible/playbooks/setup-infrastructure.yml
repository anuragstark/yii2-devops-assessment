---
- name: Setup Infrastructure for Yii2 Application
  hosts: ec2_servers
  become: true
  vars:
    docker_compose_version: "2.21.0"
    nginx_conf_source: "../nginx/yii2-app.conf"
    nginx_conf_dest: "/etc/nginx/sites-available/yii2-app"
    app_user: "ubuntu"
    app_directory: "/home/{{ app_user }}/yii2-app"

  tasks:
    - name: Remove existing Docker repository files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/apt/sources.list.d/docker.list
        - /etc/apt/sources.list.d/docker-ce.list
        - /etc/apt/sources.list.d/download_docker_com_linux_ubuntu.list

    - name: Remove old Docker GPG keys
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/apt/trusted.gpg.d/docker.gpg
        - /usr/share/keyrings/docker-archive-keyring.gpg
        - /etc/apt/keyrings/docker.gpg

    - name: Update apt package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - git
          - nginx
          - python3-pip
          - python3-docker
        state: present

    - name: Create directory for Docker keyring
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Download Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /tmp/docker.gpg
        mode: "0644"

    - name: Add Docker GPG key to keyring
      shell: gpg --dearmor < /tmp/docker.gpg > /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository with signed-by
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present


    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Add user to docker group
      user:
        name: "{{ app_user }}"
        groups: docker
        append: yes

    - name: Reset ssh connection to refresh grp mmbership
      meta: reset_connection


    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Install Docker Compose standalone
      get_url:
        url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-Linux-x86_64"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Initialize Docker Swarm
      docker_swarm:
        state: present
        advertise_addr: "{{ ansible_default_ipv4.address }}"
      become_user: "{{ app_user }}"

    - name: Create application directory
      file:
        path: "{{ app_directory }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Configure NGINX
      block:
        - name: Copy NGINX configuration
          copy:
            src: "{{ nginx_conf_source }}"
            dest: "{{ nginx_conf_dest }}"
            owner: root
            group: root
            mode: '0644'
          notify: restart nginx

        - name: Enable site configuration
          file:
            src: "{{ nginx_conf_dest }}"
            dest: "/etc/nginx/sites-enabled/yii2-app"
            state: link
          notify: restart nginx

        - name: Remove default NGINX site
          file:
            path: /etc/nginx/sites-enabled/default
            state: absent
          notify: restart nginx

        - name: Test NGINX configuration
          command: nginx -t
          register: nginx_test
          changed_when: false

        - name: Start and enable NGINX
          systemd:
            name: nginx
            state: started
            enabled: yes

    - name: Configure firewall
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - '22'
        - '80'
        - '443'
        - '8080'

    - name: Enable firewall
      ufw:
        state: enabled
        policy: deny
        direction: incoming

  handlers:
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted
